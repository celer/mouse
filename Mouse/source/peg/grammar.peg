//=========================================================================
//
//  Part of PEG parser generator Mouse.
//
//  Copyright (C) 2009, 2010, 2011
//  by Roman R. Redziejowski (www.romanredz.se).
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//-------------------------------------------------------------------------
//
//  Change log
//    090701 License changed by the author to Apache v.2.
//    090710 Allowed uppercase HexDigit.
//    090816 Added check for invalid Unicode.
//    090816 Made action for Grammar non-boolean.
//   Version 1.3
//    100510 Replaced Space? by Space.
//    100510 Changed [\r\n] to [\r]? [\n] in EOL.
//   Version 1.3.1
//    110113 Skip changed from (!SEMI _)* SEMI to (!SEMI _)+ SEMI?.
//           (Bug fix: Skip failed after last SEMI, causing extra message.)
//   Version 1.4
//    110919 Added UNTIL expression in Suffixed.
//    110919 Added optional ^ in front of CharClass.
//    111006 Used the shorthand expressions in the definition of Grammar,
//           Skip, DiagName, StringLit, CharClass, Char, Comment.
//
//=========================================================================

  Grammar   = Space (Rule/Skip)*+ EOT {Grammar} ;

  Rule      = Name EQUAL RuleRhs DiagName? SEMI {Rule} ~{Error} ;

  Skip      = SEMI             // Skip must not consume null or fail.
            / _++ (SEMI/EOT) ; // It is never called at EOT, but possibly at SEMI.

  RuleRhs   = Sequence Actions (SLASH Sequence Actions)* {} <right-hand side> ;

  Choice    = Sequence (SLASH Sequence)* {} ;

  Sequence  = Prefixed+ {} ;

  Prefixed  = PREFIX? Suffixed {} ;

  Suffixed  = Primary (UNTIL Primary / SUFFIX)? {} ;

  Primary   = Name      {Resolve}
            / LPAREN Choice RPAREN {Pass2}
            / ANY       {Any}
            / StringLit {Pass}
            / Range     {Pass}
            / CharClass {Pass} ;

  Actions   = OnSucc OnFail {} ;

  OnSucc    = (LWING AND? Name? RWING)? {} ;

  OnFail    = (TILDA LWING Name? RWING)? {} ;

  Name      = Letter (Letter / Digit)* Space {} ;

  DiagName  = "<" Char++ ">" Space {} ;

  StringLit = ["] Char++ ["] Space {} ;

  CharClass = ("[" / "^[") Char++ "]" Space {} ;

  Range     = "[" Char "-" Char "]" Space {} ;

  Char      = Escape    {Pass}
            / ^[\r\n\\] {Char} ;

  Escape    = "\\u" HexDigit HexDigit HexDigit HexDigit {Unicode}
            / "\\t" {Tab}
            / "\\n" {Newline}
            / "\\r" {CarRet}
            / !"\\u""\\"_ {Escape} ;

  Letter   = [a-z] / [A-Z] ;
  Digit    = [0-9] ;
  HexDigit = [0-9] / [a-f] / [A-F] ;

  PREFIX   = [&!]  Space <& or !> ;
  SUFFIX   = [?*+] Space <? or * or +> ;
  UNTIL    = ("*+" / "++") Space <*+ or ++> ;

  EQUAL   = "=" Space  <=> ;
  SEMI    = ";" Space  <;> ;
  SLASH   = "/" Space  </> ;
  AND     = "&" Space  <&> ;
  LPAREN  = "(" Space  <(> ;
  RPAREN  = ")" Space  <)> ;
  LWING   = "{" Space  <{> ;
  RWING   = "}" Space  <}> ;
  TILDA   = "~" Space  <~> ;
  ANY     = "_" Space  <_> ;

  Space   = ([ \r\n\t] / Comment)* {} ;
  Comment = "//" _*+ EOL ;

  EOL     = [\r]? [\n] / !_  <end of line> ;
  EOT     = !_               <end of text> ;
