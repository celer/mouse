//=========================================================================
//
//  This skeleton was generated by Mouse 1.6.1 at 2014-12-01 21:27:05 GMT
//  from grammar
//    '/home/celer/Project/gomouse/examples/examples2/myGrammar.txt'.
//
//=========================================================================

package main;

import "fmt"
import mouse "../../src/runtime";

type MySemantics struct {
	res float64;
	mouse.SemanticsBase
}
func NewMySemantics() *MySemantics{
  s:=MySemantics{}
  return &s;
}
  
//-------------------------------------------------------------------
//  Input = Space Sum !_
//            0    1
//-------------------------------------------------------------------
func (this *MySemantics) result(){
	r,ok:=this.RHS(1).Get().(float64);
	if(ok){
		this.res=r;
	}
}
//---------------------------------------------------------------------
//  Sum = Number ("+" Number)* !_
//---------------------------------------------------------------------
func (this *MySemantics) sum() {
      n:=this.RHSSize();
			s,ok:=this.RHS(1).Get().(float64);
			if(ok){
				if (!this.RHS(0).IsEmpty()){ s = -s; }
				for i:=3;i<n;i+=2 {
					if (this.RHS(i-1).RuneAt(0)==rune('+')){
						r,ok:=this.RHS(i).Get().(float64);
						if(ok){ s+=r };
					} else {
						r,ok:=this.RHS(i).Get().(float64);
						if(ok){ s-=r };
					}
				}
				this.LHS().Put(s);
			}
}

//-------------------------------------------------------------------
//  Product = Factor MultOp Factor ... MultOp Factor
//               0     1      2         n-2     n-1
//-------------------------------------------------------------------
func (this *MySemantics) product() {
      n:=this.RHSSize();
			s,ok:=this.RHS(0).Get().(float64);
			if(ok){
				for i:=2;i<n;i+=2 {
					if (!this.RHS(1).IsEmpty() && this.RHS(i-1).RuneAt(0)==rune('/')){
						r,ok:=this.RHS(i).Get().(float64);
						if(ok){ s/=r };
					} else {
						r,ok:=this.RHS(i).Get().(float64);
						if(ok){ s*=r };
					}
				}
				this.LHS().Put(s);
			}
}

//---------------------------------------------------------------------
//  Number = [0-9]+
//---------------------------------------------------------------------
func (this *MySemantics) fraction() {
	var i float64;
	fmt.Sscanf(this.RHSText(0,this.RHSSize()-1),"%f",&i);
	this.LHS().Put(i);
}

//---------------------------------------------------------------------
//  Number = [0-9]+
//---------------------------------------------------------------------
func (this *MySemantics) integer() {
	var i float64;
	fmt.Sscanf(this.LHS().Text(),"%f",&i);
	this.LHS().Put(i);
}
  
func (this *MySemantics) unwrap(){
	this.LHS().Put(this.RHS(1).Get());
}

